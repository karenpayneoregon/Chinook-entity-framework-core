
// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ChinookLibrary.Data.Configurations;
using ChinookLibrary.Models;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using System.Diagnostics;
using Microsoft.Extensions.Configuration;

#nullable disable

#nullable disable

namespace ChinookLibrary.Data
{
    public partial class ChinookContext : DbContext
    {
        public ChinookContext()
        {
        }

        public ChinookContext(DbContextOptions<ChinookContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Album> Album { get; set; }
        public virtual DbSet<Artist> Artist { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Genre> Genre { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<InvoiceLine> InvoiceLine { get; set; }
        public virtual DbSet<MediaType> MediaType { get; set; }
        public virtual DbSet<Playlist> Playlist { get; set; }
        public virtual DbSet<PlaylistTrack> PlaylistTrack { get; set; }
        public virtual DbSet<Track> Track { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //optionsBuilder.UseSqlServer("Data Source=.\\SQLEXPRESS;Initial Catalog=Chinook;Integrated Security=True");
                StandardConnection(optionsBuilder);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.ApplyConfiguration(new AlbumConfiguration());
            modelBuilder.ApplyConfiguration(new ArtistConfiguration());
            modelBuilder.ApplyConfiguration(new CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new EmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new GenreConfiguration());
            modelBuilder.ApplyConfiguration(new InvoiceConfiguration());
            modelBuilder.ApplyConfiguration(new InvoiceLineConfiguration());
            modelBuilder.ApplyConfiguration(new MediaTypeConfiguration());
            modelBuilder.ApplyConfiguration(new PlaylistConfiguration());
            modelBuilder.ApplyConfiguration(new PlaylistTrackConfiguration());
            modelBuilder.ApplyConfiguration(new TrackConfiguration());
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        /// <summary>
        /// Read connection string from appsettings.json
        /// </summary>
        /// <param name="builder"></param>
        /// <returns>Connection string</returns>
        /// <remarks>
        /// Next level (which I have coded) is to have three environment which can
        /// come from one or more appsettings files along with setting the environment
        /// via Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") for ASP.NET Core
        /// or a custom variable e.g. Environment.GetEnvironmentVariable("OED_ENVIRONMENT")
        /// </remarks>
        private static IConfigurationRoot ReadAppsettings(out IConfigurationBuilder builder)
        {
            builder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);
            IConfigurationRoot config = builder.Build();

            return config; // connection string
        }
        private static void StandardConnection(DbContextOptionsBuilder optionsBuilder)
        {
            var config = ReadAppsettings(out var builder);
            optionsBuilder.UseSqlServer(config.GetConnectionString("DatabaseConnection"));
        }
        private static void LogQueryInfoToDebugOutputWindow(DbContextOptionsBuilder optionsBuilder)
        {
            var config = ReadAppsettings(out var builder);
            optionsBuilder.UseSqlServer(config.GetConnectionString("DatabaseConnection"))
                .EnableSensitiveDataLogging()
                .LogTo(message => Debug.WriteLine(message));
        }
    }


}
